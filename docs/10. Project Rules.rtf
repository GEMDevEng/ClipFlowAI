{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ### Key Points\
- It seems likely your team can follow these project rules to build the AI-powered faceless video generation platform efficiently.\
- Research suggests these rules, inspired by Cursor Rules, ensure consistency, quality, and collaboration.\
- The evidence leans toward needing clear communication and documentation for a smooth development process.\
\
### Introduction\
These project rules are designed for your development team to ensure a structured, efficient, and high-quality build of the AI-powered faceless video generation platform. They draw inspiration from Cursor Rules, which guide AI behavior in code generation, but are adapted for general software development, especially for a no-code project using Bubble.io, RunwayML, and Zapier.\
\
### Project Rules Overview\
Below are 18 detailed rules covering daily stand-ups, version control, documentation, and more, tailored to your project's needs. These rules help manage the complexity of AI integration, video processing, and social media publishing while keeping costs low and ensuring user satisfaction.\
\
- **Daily Stand-ups**: Hold brief daily meetings to discuss progress and blockers, fostering collaboration.\
- **Version Control**: Use Git for coded parts and Bubble.io's version history for no-code changes, ensuring trackable progress.\
- **Documentation**: Maintain user guides, technical specs, and logs for clarity and future reference.\
- **Coding Standards**: Follow conventions for any code, and use consistent naming in Bubble.io for readability.\
- **Optimize Data Operations**: Minimize advanced filtering in Bubble.io to improve performance, using server-side methods.\
- **Data Modeling**: Design Bubble.io's database schema carefully for efficient data handling.\
- **Use Version History**: Save versions in Bubble.io regularly for rollbacks and tracking changes.\
- **Video Generation Workflow**: Define clear workflows in Bubble.io for RunwayML integration, handling inputs and storing videos.\
- **Social Media Publishing**: Automate publishing with Zapier, ensuring tested workflows and error handling.\
- **Security Practices**: Use HTTPS, secure authentication, and protect sensitive data in Bubble.io.\
- **Feature Prioritization**: Focus on core MVP features first, deferring advanced ones like multi-language support.\
- **Cost Management**: Monitor API usage to stay within free tiers, planning for production costs with the client.\
- **AI Content Quality Control**: Review AI-generated videos for quality before publishing, with options for regeneration.\
- **User Interface Design**: Follow Bubble.io's design best practices for an intuitive, responsive UI.\
- **Data Privacy**: Ensure compliance with privacy laws, collecting only necessary data with consent.\
- **Communication Channels**: Use tools like Slack for real-time updates, documenting decisions in shared logs.\
- **Testing and Quality Assurance**: Implement unit, integration, and user acceptance testing for reliability.\
- **Deployment and Release Management**: Use Bubble.io's staging for testing, documenting deployment steps for smooth updates.\
\
---\
\
### Detailed Analysis and Report Note\
\
This section provides a comprehensive analysis of the **Project Rules** for the development team working on the AI-Powered Faceless Video Generation Platform, inspired by the concept of "Cursor Rules" from the Cursor AI code editor. These rules are tailored to ensure consistency, quality, efficiency, and collaboration throughout the project lifecycle, aligning with the project's technical and functional requirements as of 06:56 AM PDT on Sunday, April 13, 2025.\
\
#### Context and Background\
The project involves developing a web application for automating short-form faceless video creation (30-90 seconds) for social media like TikTok and YouTube Shorts, with features including user authentication, AI-driven generation, customization, scheduling, multi-language support, and analytics. The tech stack includes Bubble.io for no-code development, RunwayML for AI video generation, and Zapier for social media integration, given the user's constraints (no coding skills, good prompting skills, $0 budget, and team support).\
\
The Upwork Project Description outlined the need for a platform similar to AutoShorts.ai, with technical requirements like React.js/Vue.js for frontend and Node.js/Express for backend, but given the user's skills, the project shifted to no-code tools. The Job Analysis confirmed feasibility with team support, leveraging the Automated Viral Video Creation SOP, which details a 19-step workflow using n8n, OpenAI, Cling AI, and social media tools. The Work Breakdown Structure (WBS), Product Requirements Document (PRD), Software Requirements Specification (SRS), Features Results, App Flow Document, Frontend Guidelines, Backend Structure, and Tech Stack Document provided detailed insights into the project's scope and implementation.\
\
Given the user's request for "Project Rules" similar to Cursor Rules, which are used to guide AI behavior in code generation, I interpreted this as a need for development team guidelines to ensure consistency and quality. Cursor Rules, as seen in [Guide to customizing AI behavior in Cursor using project-specific and global rules for model responses](https://docs.cursor.com/context/rules-for-ai), focus on customizing AI responses, but for this project, the rules are adapted to general software development best practices, especially for a no-code environment.\
\
#### Development of Project Rules\
To create these rules, I first considered general software development best practices, then tailored them to the project's specific needs, including no-code development with Bubble.io, AI integration with RunwayML, and social media automation with Zapier. I also searched for "Bubble.io best practices" to incorporate platform-specific guidelines, finding resources like [Some best practices on how to make your Bubble app perform at its best](https://docs.airdev.co/bubble-development-guide/steps/develop/optimize-speed) and [Bubble best practices: structuring your database (by AirDev)](https://forum.bubble.io/t/bubble-best-practices-structuring-your-database-by-airdev/46228).\
\
The rules were categorized into areas like communication, version control, documentation, coding standards, data operations, video generation, security, and more, ensuring comprehensive coverage. Each rule includes a description, purpose, details, and rationale, providing a clear framework for the team.\
\
#### Detailed Project Rules\
\
| **Rule Number** | **Rule Name**                  | **Description**                                                                 | **Purpose**                              | **Details**                                                                                     | **Rationale**                                                                 |\
|-----------------|--------------------------------|-------------------------------------------------------------------------------|------------------------------------------|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|\
| 1               | Daily Stand-ups                | Hold daily meetings to discuss progress, blockers, and plans.                  | Ensures alignment and collaboration.     | Brief (15-30 min), share accomplishments, plans, blockers; use Slack, Teams, or Zoom.           | Critical for coordinating AI, video, and social media components.             |\
| 2               | Version Control                | Version all changes using Git for code, Bubble.io history for no-code.         | Maintains change history and collaboration. | Git branching (feature, pull requests), Bubble.io version history with notes, document changes. | Ensures accountability and rollback capability in complex projects.           |\
| 3               | Documentation                  | Maintain up-to-date user guides, technical specs, and logs.                    | Ensures knowledge sharing and maintenance. | Use Notion, Confluence, or Markdown; include architecture, APIs, workflows, and decision logs.  | Crucial for AI and video processing workflows needing clear explanations.     |\
| 4               | Coding Standards               | Follow conventions for coded parts, consistent naming in Bubble.io.            | Ensures readability and consistency.      | PEP 8 for Python, ESLint for JavaScript; Bubble.io: name elements clearly, organize workflows.  | Reduces errors, aids team understanding in mixed no-code/code environment.    |\
| 5               | Optimize Data Operations       | Minimize advanced filtering in Bubble.io, use server-side methods.             | Improves performance for video-heavy workflows. | Avoid client-side filtering, use caching, pagination for large datasets like analytics.        | Performance critical for responsive video generation and analytics.           |\
| 6               | Data Modeling                 | Design Bubble.io database schema for efficient data handling.                  | Ensures data storage and retrieval efficiency. | Use proper data types, define relationships (User-VideoProjects), normalize data.               | Essential for managing user data, videos, and analytics effectively.          |\
| 7               | Use Version History           | Save versions in Bubble.io regularly for tracking and rollbacks.               | Facilitates change tracking and recovery. | Save after significant features, include notes, test before saving.                            | Safety net for no-code development, ensuring stable states.                   |\
| 8               | Video Generation Workflow     | Define clear workflow for RunwayML integration in Bubble.io.                   | Ensures reliable AI-driven video generation. | Trigger generation, monitor status, store videos in cloud (Cloudinary, S3), handle errors.     | Seamless integration critical for user satisfaction in video creation.        |\
| 9               | Social Media Publishing       | Automate publishing to TikTok, YouTube with Zapier, ensure reliability.        | Streamlines publishing, reduces manual effort. | Set up workflows, test for errors, implement retry logic, monitor API limits.                  | Automation ensures timely, consistent posts across platforms.                 |\
| 10              | Security Practices            | Implement HTTPS, secure authentication, protect sensitive data.                | Ensures compliance and protects against vulnerabilities. | Use JWT, encrypt API keys, update dependencies, validate inputs.                               | Critical for user data and video content security.                            |\
| 11              | Feature Prioritization       | Focus on core MVP features first, defer advanced ones.                        | Keeps project on track, meets minimum requirements. | Core: authentication, video generation, basic customization; defer multi-language, analytics.  | Prevents scope creep, ensures timely MVP delivery.                           |\
| 12              | Cost Management              | Monitor API usage, stay within free tiers, plan for production costs.          | Stays within budget, ensures transparency. | Track RunwayML, Zapier usage, estimate production costs, discuss with client.                  | Crucial for $0 budget, avoiding unexpected expenses.                         |\
| 13              | AI Content Quality Control   | Review AI-generated videos for quality before publishing.                     | Ensures user satisfaction with generated content. | Set up moderation in Bubble.io, flag low-quality outputs, offer regeneration options.          | AI outputs can vary, quality control is essential.                           |\
| 14              | User Interface Design        | Follow Bubble.io's design best practices for intuitive UI.                    | Ensures seamless, user-friendly experience. | Use columns, ensure responsiveness, clear labels, tooltips for non-technical users.            | Critical for content creators needing easy navigation.                       |\
| 15              | Data Privacy                 | Handle user data per privacy regulations, collect only necessary data.        | Protects privacy, ensures legal compliance. | Obtain consent, comply with GDPR/CCPA, secure data storage/transmission.                      | Paramount for user trust and legal adherence.                                |\
| 16              | Communication Channels       | Use designated tools for team updates, document decisions.                    | Facilitates efficient collaboration.      | Use Slack, email for formal comms, maintain shared log/wiki for decisions.                    | Prevents misunderstandings, keeps team aligned.                              |\
| 17              | Testing and Quality Assurance| Implement unit, integration, and user acceptance testing.                     | Minimizes bugs, ensures reliability.      | Test workflows, integrations (RunwayML, Zapier), use Bubble preview, conduct UAT.             | Essential for complex AI and video processing application.                   |\
| 18              | Deployment and Release Management | Follow structured process for deploying updates.                            | Ensures smooth transitions, minimizes downtime. | Use Bubble staging, document steps, maintain changelog, notify users of updates.               | Ensures reliability and user trust in updates.                               |\
\
#### Conclusion and Recommendations\
These **Project Rules** provide a comprehensive framework for the development team, ensuring the AI-Powered Faceless Video Generation Platform is built efficiently and meets quality standards. By following these rules, the team can manage the complexity of AI integration, video processing, and social media publishing while staying within budget constraints. It is recommended to regularly review and adapt these rules based on project progress and team feedback, ensuring continuous improvement.\
\
#### Key Citations\
- [Guide to customizing AI behavior in Cursor using project-specific and global rules for model responses](https://docs.cursor.com/context/rules-for-ai)\
- [Some best practices on how to make your Bubble app perform at its best](https://docs.airdev.co/bubble-development-guide/steps/develop/optimize-speed)\
- [Bubble best practices: structuring your database (by AirDev)](https://forum.bubble.io/t/bubble-best-practices-structuring-your-database-by-airdev/46228)}